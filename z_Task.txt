1) Сохранение делать асинхронно, в горутине. Отдать ответ пользователю, не дожидаясь завершения.
2) LAUNCH WITH 2 PATH IN API
3) REMOVE UNNECESSARY COLUMNS FROM DB




Этапы обучения
1. После выполнения задачи проверяем ее функционал, соответствует ли все заявленным требовани-ям.

3. Работа с unit test
    3.1 Задача покрыть unit тестами методы.
    3.2 Проверить что тест реализует разные варианты проверки метода.
4. Работа со структурой микросервиса
     4.1 Задача разделить сервис на слои со слабыми зависимостями (handler, service, database)
     4.2. Проверить как реализовано.
5. Работа со swagger
    5.1. Задача добавить swagger документацию к методам микросервиса.
    5.2. Оцениваем как написана документация (соответствие методов их описанию, вход-ные\возвращаемые значения)
    5.3. Конвертируем swagger в postman, пробуем выполнить запросы, смотрим результат.
6. Работа с метриками
   6.1. Задача добавить prometheus метрики в микросервис.
   6.2. Обсудить какие метрики мы можем отдавать и почему они важны.
   6.3. Проверить корректность метрик в prometheus (возможно подключить их в графану) 
7. Работа с миграциями БД
   7.1. Задача сделать миграции БД с помощью библиотеки go.
   7.2. Накатить\откатить миграции, посмотреть как отработает.



LEARN
• Пакет context (cancel, timeout) 
• пакет sync (Waitgroup, Mutex, Atomic)  
• рефлексия
• Основные компоненты веб-сервиса
    • middleware
    • Обработка ошибок
    • Фреймворк (любой web Фреймворк)
    • Oauth и JWT
    • Swagger
• Парсинг параметров в структуру и валидация
• Локальный конфиг и удалённый конфиг
• Логирования 
• ООП 
• SOLID
• распределенные системы
• микросервисы. Виды общения между микросервисами
    • gRPC и protobuf 
    • Балансировка нагрузки
